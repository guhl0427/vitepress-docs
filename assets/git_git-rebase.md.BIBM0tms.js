import{_ as a,c as s,o as e,a2 as n}from"./chunks/framework.BF3Ou0JT.js";const g=JSON.parse('{"title":"git-rebase","description":"","frontmatter":{},"headers":[],"relativePath":"git/git-rebase.md","filePath":"git/git-rebase.md","lastUpdated":1705918827000}'),i={name:"git/git-rebase.md"},p=n(`<h1 id="git-rebase" tabindex="-1">git-rebase <a class="header-anchor" href="#git-rebase" aria-label="Permalink to &quot;git-rebase&quot;">​</a></h1><h2 id="git-rebase-xxx" tabindex="-1">git rebase xxx <a class="header-anchor" href="#git-rebase-xxx" aria-label="Permalink to &quot;git rebase xxx&quot;">​</a></h2><p>将当前分支变基到xxx分支，变基的过程中，需要处理每一次冲突，处理完成冲突后，需要添加到暂存区<code>git add .</code>，之后<code>git rebase --continue</code>进行下一次的冲突处理。</p><h2 id="git-rebase-i-xxx-合并提交" tabindex="-1">git rebase -i xxx 合并提交 <a class="header-anchor" href="#git-rebase-i-xxx-合并提交" aria-label="Permalink to &quot;git rebase -i xxx 合并提交&quot;">​</a></h2><h3 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h3><p>合并提交。日常开发中，往往会将一些与功能本身没有太多关系的代码提交，如果不进行提交合并的话，这些没有意义的提交上生产后会被带入主分支，不优雅。那么此时就可以合并提交，展示一个清晰合理的提交历史。</p><h3 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h3><p>git rebase -i commit-hash</p><p>将commit-hash(不包含该commit)值之后的commit合并为同一个commit</p><p>git rebase -i HEAD~4</p><p>将前4个commit合并为同一个commit</p><h3 id="操作流程" tabindex="-1">操作流程 <a class="header-anchor" href="#操作流程" aria-label="Permalink to &quot;操作流程&quot;">​</a></h3><ol><li>git rebase -i commit-hash</li><li>按<code>i键</code>进入编辑模式</li><li>将最上面的一次提交设置为<code>pick</code>，其他的提交设置为<code>squash</code>。</li><li>按<code>ESC键</code>然后输出<code>:wq</code>，保存并退出</li><li>在之后出现的编辑页面继续按<code>i键</code>进入编辑模式，整理<code>commit信息</code>（不需要的直接删除就行dd快速删除行）</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pick hash1 update readme</span></span>
<span class="line"><span>pick hash2 commit1</span></span>
<span class="line"><span>pick hash3 commit2</span></span>
<span class="line"><span>pick hash4 commit3</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>pick hash1 update readme</span></span>
<span class="line"><span>pick hash2 commit1</span></span>
<span class="line"><span>s hash3 commit2</span></span>
<span class="line"><span>s hash4 commit3</span></span></code></pre></div><p>hash1会被保留</p><p>hash2、hash3、hash4合并为一个commit，并且整合commit message</p><blockquote><p>切记：不要在共享分支上进行变基</p><p>切记：不要在共享分支上进行变基</p><p>切记：不要在共享分支上进行变基</p></blockquote><h2 id="作用-1" tabindex="-1">作用 <a class="header-anchor" href="#作用-1" aria-label="Permalink to &quot;作用&quot;">​</a></h2><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA" target="_blank" rel="noreferrer">官方文档</a></p><p>顾名思义，变基就是改变基点。</p><p>将当前分支与目标分支先进行比较，找出当前分支领先于目标分支的commits，将这些commits按顺序放到目标分支。</p><h2 id="命令-1" tabindex="-1">命令 <a class="header-anchor" href="#命令-1" aria-label="Permalink to &quot;命令&quot;">​</a></h2><blockquote><p>git rebase xxx</p></blockquote><p>将当前分支变基到xxx分支<code>（一般来说是主分支或者预发分支）</code></p><h2 id="操作流程-1" tabindex="-1">操作流程 <a class="header-anchor" href="#操作流程-1" aria-label="Permalink to &quot;操作流程&quot;">​</a></h2><p>变基的过程中，需要处理每一次冲突。</p><p>处理完单次冲突后，需要<code>git add .</code>添加到暂存区，然后<code>git rebase --continue（类似变基过程中的git commit）</code>提交本次合并，并进行下一次的冲突处理。</p><p>变基完成后再merge到主分支。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git checkout feat/branch</span></span>
<span class="line"><span>git rebase main</span></span>
<span class="line"><span>...处理冲突</span></span>
<span class="line"><span>git add.</span></span>
<span class="line"><span>git rebase --continue</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 变基完成后 合并到主分支</span></span>
<span class="line"><span>git checkout main</span></span>
<span class="line"><span>git merge feat/branch</span></span></code></pre></div><h1 id="git-rebase-i-xxx-交互模式" tabindex="-1">git rebase -i xxx 交互模式 <a class="header-anchor" href="#git-rebase-i-xxx-交互模式" aria-label="Permalink to &quot;git rebase -i xxx 交互模式&quot;">​</a></h1><p>(题外话：并不清楚这个命令跟rebase有什么关系)</p><h2 id="作用-2" tabindex="-1">作用 <a class="header-anchor" href="#作用-2" aria-label="Permalink to &quot;作用&quot;">​</a></h2><blockquote><p>合并提交</p></blockquote><p>日常开发中，往往会将一些与功能本身没有太多关系的代码提交。</p><p>如果不进行提交合并的话，这些没有意义的提交上生产后会被带入主分支，不优雅[狗头]。</p><p>那么此时就可以合并提交操作，修改提交历史，展示一个清晰合理的提交历史。</p><h2 id="命令-2" tabindex="-1">命令 <a class="header-anchor" href="#命令-2" aria-label="Permalink to &quot;命令&quot;">​</a></h2><blockquote><p>git rebase -i commit-hash</p></blockquote><p>将commit-hash值（不包含该commit）之后的commit合并为同一个commit</p><blockquote><p>git rebase -i HEAD~n</p></blockquote><p>将前n个commit合并为同一个commit</p><h2 id="操作流程-2" tabindex="-1">操作流程 <a class="header-anchor" href="#操作流程-2" aria-label="Permalink to &quot;操作流程&quot;">​</a></h2><ol><li>git rebase -i commit-hash</li><li>按<code>i键</code>进入编辑模式</li><li>将最上面的一次提交设置为<code>pick</code>，其他的提交设置为<code>squash</code>。</li><li>按<code>ESC键</code>然后输出<code>:wq</code>，保存并退出</li><li>在之后出现的编辑页面继续按<code>i键</code>进入编辑模式，整理<code>commit信息</code>（不需要的直接删除就行dd快速删除行）</li></ol><h3 id="例1" tabindex="-1">例1 <a class="header-anchor" href="#例1" aria-label="Permalink to &quot;例1&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pick hash1 update readme</span></span>
<span class="line"><span>pick hash2 commit1</span></span>
<span class="line"><span>pick hash3 commit2</span></span>
<span class="line"><span>pick hash4 commit3</span></span>
<span class="line"><span># 修改为-&gt;</span></span>
<span class="line"><span>pick hash1 update readme</span></span>
<span class="line"><span>pick hash2 commit1</span></span>
<span class="line"><span>s hash3 commit2</span></span>
<span class="line"><span>s hash4 commit3</span></span></code></pre></div><p>hash1会被保留</p><p>hash2、hash3、hash4合并为1个commit，并且整合commit message</p><p>相当于原本的4次commit变成了2次commit</p><h3 id="例2" tabindex="-1">例2 <a class="header-anchor" href="#例2" aria-label="Permalink to &quot;例2&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pick hash1 update readme</span></span>
<span class="line"><span>pick hash2 commit1</span></span>
<span class="line"><span>pick hash3 commit2</span></span>
<span class="line"><span>pick hash4 commit3</span></span>
<span class="line"><span># 修改为-&gt;</span></span>
<span class="line"><span>pick hash1 update readme</span></span>
<span class="line"><span>pick hash2 commit1</span></span>
<span class="line"><span>s hash3 commit2</span></span>
<span class="line"><span>r hash4 commit3</span></span></code></pre></div><p>hash1会被保留</p><p>hash2和hash3合并为1个commit，并且整合commit message</p><p>hash4会被保留，但可以修改commit的message</p><p>相当于原来的4次commit变成了3次commit</p>`,54),t=[p];function c(o,l,h,r,d,m){return e(),s("div",null,t)}const u=a(i,[["render",c]]);export{g as __pageData,u as default};
