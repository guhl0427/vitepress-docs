import{_ as e,o as a,c as o,O as r}from"./chunks/framework.10f9f845.js";const g=JSON.parse('{"title":"Regular Expression","description":"","frontmatter":{},"headers":[],"relativePath":"regex/regular-xpression.md","filePath":"regex/regular-xpression.md","lastUpdated":1688028803000}'),t={name:"regex/regular-xpression.md"},s=r('<h1 id="regular-expression" tabindex="-1">Regular Expression <a class="header-anchor" href="#regular-expression" aria-label="Permalink to &quot;Regular Expression&quot;">​</a></h1><h2 id="断言" tabindex="-1">断言 <a class="header-anchor" href="#断言" aria-label="Permalink to &quot;断言&quot;">​</a></h2><blockquote><p><a href="https://www.runoob.com/w3cnote/reg-lookahead-lookbehind.html" target="_blank" rel="noreferrer">https://www.runoob.com/w3cnote/reg-lookahead-lookbehind.html</a></p></blockquote><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>(?=pattern) 零宽正向先行断言(zero-width positive lookahead assertion)</p><p>(?!pattern) 零宽负向先行断言(zero-width negative lookahead assertion)</p><p>(?&lt;=pattern) 零宽正向后行断言(zero-width positive lookbehind assertion)</p><p>(?&lt;!pattern) 零宽负向后行断言(zero-width negative lookbehind assertion)</p><h3 id="记忆" tabindex="-1">记忆 <a class="header-anchor" href="#记忆" aria-label="Permalink to &quot;记忆&quot;">​</a></h3><p>positive 正向 可以理解为true</p><p>negative 负向 可以理解为false</p><p>lookahead 先行 可以理解为从前往后</p><p>lookbehind 后行 可以理解为从后往前</p>',13),n=[s];function i(l,p,h,d,c,_){return a(),o("div",null,n)}const k=e(t,[["render",i]]);export{g as __pageData,k as default};
