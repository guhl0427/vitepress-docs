import{_ as e,c as a,o as t,a as r}from"./app.75a36f0c.js";const k=JSON.parse('{"title":"Regular Expression","description":"","frontmatter":{},"headers":[{"level":2,"title":"断言","slug":"断言","link":"#断言","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"记忆","slug":"记忆","link":"#记忆","children":[]}]}],"relativePath":"regex/index.md","lastUpdated":1664521938000}'),o={name:"regex/index.md"},i=r('<h1 id="regular-expression" tabindex="-1">Regular Expression <a class="header-anchor" href="#regular-expression" aria-hidden="true">#</a></h1><h2 id="断言" tabindex="-1">断言 <a class="header-anchor" href="#断言" aria-hidden="true">#</a></h2><blockquote><p><a href="https://www.runoob.com/w3cnote/reg-lookahead-lookbehind.html" target="_blank" rel="noreferrer">https://www.runoob.com/w3cnote/reg-lookahead-lookbehind.html</a></p></blockquote><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-hidden="true">#</a></h3><p>(?=pattern) 零宽正向先行断言(zero-width positive lookahead assertion)</p><p>(?!pattern) 零宽负向先行断言(zero-width negative lookahead assertion)</p><p>(?&lt;=pattern) 零宽正向后行断言(zero-width positive lookbehind assertion)</p><p>(?&lt;!pattern) 零宽负向后行断言(zero-width negative lookbehind assertion)</p><h3 id="记忆" tabindex="-1">记忆 <a class="header-anchor" href="#记忆" aria-hidden="true">#</a></h3><p>positive 正向 可以理解为true</p><p>negative 负向 可以理解为false</p><p>lookahead 先行 可以理解为从前往后</p><p>lookbehind 后行 可以理解为从后往前</p>',13),n=[i];function s(d,l,h,p,c,_){return t(),a("div",null,n)}const g=e(o,[["render",s]]);export{k as __pageData,g as default};
